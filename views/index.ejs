<!DOCTYPE html>
<html lang="fr">

<head>
    <!-- Google Tag Manager -->
    <script>(function (w, d, s, l, i) {
            w[l] = w[l] || []; w[l].push({
                'gtm.start':
                    new Date().getTime(), event: 'gtm.js'
            }); var f = d.getElementsByTagName(s)[0],
                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', 'GTM-KWDPDBHJ');</script>
    <!-- End Google Tag Manager -->
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-6JL94REJKC"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-6JL94REJKC');
    </script>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Vous avez besoin d'une salle pour travailler ?
    Utilisez cette page pour trouver des salles libres et savoir quand elles seront disponibles.
    Sélectionnez une date et une heure pour voir les salles disponibles à ce moment-là.">
    <meta name="keywords" content="univ, université, avignon, université avignon, univ avignon, uapv, e-uapv, univ-avignon, salles, salles libres, tidic, réservation">
    <meta name="robots" content="index, follow">
    <title>Trouver une Salle libre</title>
    <link href="/salles/public/style.css" rel="stylesheet" />
    <link rel="icon" href="/salles/public/favicon.ico" type="image/x-icon">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // Konami code qui redirige vers la page d'administration
        let currentIndex = 0;
        document.addEventListener('keydown', function (event) {
            const sequence = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'KeyB', 'KeyQ'];

            if (event.code == sequence[currentIndex]) {
                currentIndex++;
                if (currentIndex === sequence.length) {
                    window.location.href = '/salles/admin';
                }
            } else {
                currentIndex = 0;
            }

        });

        // Fonction pour la navbar lattérale sur mobile
        document.addEventListener('DOMContentLoaded', function () {
            const menuButton = document.getElementById('menu-button');
            const menu = document.getElementById('menu');
            const mobileMenuButton = document.querySelector('.lg\\:hidden button');
            const mobileMenu = document.querySelector('.lg\\:hidden[role="dialog"]');
            const closeButton = mobileMenu.querySelector('button');

            menuButton.addEventListener('click', function () {
                menu.classList.toggle('hidden');
            });

            document.addEventListener('click', function (event) {
                if (!menu.contains(event.target) && !menuButton.contains(event.target)) {
                    menu.classList.add('hidden');
                }
            });

            mobileMenuButton.addEventListener('click', function () {
                mobileMenu.classList.toggle('hidden');
            });

            closeButton.addEventListener('click', function () {
                mobileMenu.classList.add('hidden');
            });

            // JS pour le selecteur de date
            const dateInput = document.getElementById('date');
            const timeInput = document.getElementById('time');
            const now = new Date();
            const formattedDate = now.toISOString().split('T')[0];
            const formattedTime = now.toTimeString().split(' ')[0].slice(0, 5);
            dateInput.value = formattedDate;
            timeInput.value = formattedTime;
            const form = document.getElementById('dateTimeForm');
            form.addEventListener('submit', function (event) {
                const heureRegex = /([01]?[0-9]|2[0-3]):[0-5][0-9]/;
                const dateRegex = /\d{4}-\d{2}-\d{2}/;

                event.preventDefault();
                const date = document.getElementById('date').value;
                const time = document.getElementById('time').value;
                updateTable(date, time);
            });
        });
    </script>
</head>

<body class="h-full bg-gray-100 <%= univ %>">
    <!-- Google Tag Manager (noscript) -->
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KWDPDBHJ" height="0" width="0"
            style="display:none;visibility:hidden"></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->
    <div class="min-h-full">
        <!-- navbar prise de tailwind ui -->
        <header class="bg-white shadow">
            <nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8" aria-label="Global">
                <div class="flex lg:flex-1">
                    <h1 class="text-3xl font-bold tracking-tight text-gray-900">
                        <%= univ=="ceri" ? "CERI - AVIGNON" : univ.toUpperCase() %>
                    </h1>
                </div>
                <div class="flex lg:hidden">
                    <button type="button"
                        class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700">
                        <span class="sr-only">Open main menu</span>
                        <svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                            aria-hidden="true" data-slot="icon">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                        </svg>
                    </button>
                </div>
                <div class="hidden lg:flex lg:gap-x-12">
                    <a href="/salles/univ/ceri"
                        class="text-sm/6 font-semibold text-gray-900 hover:text-indigo-600">Ceri</a>
                    <a href="/salles/univ/agroscience"
                        class="text-sm/6 font-semibold text-gray-900 hover:text-indigo-600">Agroscience</a>
                    <a href="/salles/univ/avignon-centre"
                        class="text-sm/6 font-semibold text-gray-900 hover:text-indigo-600">Avignon-Centre</a>
                </div>
            </nav>
            <!-- Mobile menu, show/hide based on menu open state. -->
            <div class="lg:hidden hidden" role="dialog" aria-modal="true">
                <!-- Background backdrop, show/hide based on slide-over state. -->
                <div class="fixed inset-0 z-10"></div>
                <div
                    class="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10">
                    <div class="flex items-center justify-between">
                        <h1 class="text-3xl font-bold tracking-tight text-gray-900">
                            <%= univ.toUpperCase() %>
                        </h1>
                        <button type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700">
                            <span class="sr-only">Close menu</span>
                            <svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                                aria-hidden="true" data-slot="icon">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <div class="mt-6 flow-root">
                        <div class="-my-6 divide-y divide-gray-500/10">
                            <div class="space-y-2 py-6">
                                <a href="/salles/univ/ceri"
                                    class="block rounded-lg px-3 py-2 text-base/7 font-semibold text-gray-900 hover:bg-gray-50">Ceri</a>
                                <a href="/salles/univ/agroscience"
                                    class="block rounded-lg px-3 py-2 text-base/7 font-semibold text-gray-900 hover:bg-gray-50">Agroscience</a>
                                <a href="/salles/univ/avignon-centre"
                                    class="block rounded-lg px-3 py-2 text-base/7 font-semibold text-gray-900 hover:bg-gray-50">Avignon-Centre</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <main>
            <div class="mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8">

                <div class="content">
                    <!-- Selecteur de date -->
                    <div class="relative inline-block text-left w-full">
                        <div class="grid grid-cols-5 gap-4">
                            <div class="col-span-3 relative">
                                <button type="button"
                                    class="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                                    id="menu-button" aria-expanded="true" aria-haspopup="true" disabled>
                                    <div class="menu-button-text">Sélectionner Date et Heure</div>
                                    <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                        fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd"
                                            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                            clip-rule="evenodd" />
                                    </svg>
                                </button>

                                <div id="menu"
                                    class="absolute mt-2 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
                                    role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
                                    <div class="py-1" role="none">
                                        <form id="dateTimeForm" class="px-4 py-3" role="none">
                                            <div class="mb-4">
                                                <label for="date"
                                                    class="block text-sm font-medium text-gray-700">Date</label>
                                                <input type="date" id="date" name="date"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                            </div>
                                            <div class="mb-4">
                                                <label for="time"
                                                    class="block text-sm font-medium text-gray-700">Heure</label>
                                                <input type="time" id="time" name="time"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                            </div>
                                            <div>
                                                <button type="submit" id="searchButton"
                                                    class="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Rechercher</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="col-span-2">
                                <button type="button"
                                    class="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-indigo-600 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                                    onclick="updateTable()">
                                    Heure actuelle
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Tableau des salles libres -->
                    <div class="container mx-auto mt-6 max-w-4xl">
                        <h1 class="text-2xl font-bold mb-4">Salles Libres</h1>
                        <table id="freeRoomsTable" class="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
                            <thead class="bg-gray-50 shadow-sm">
                                <tr>
                                    <th
                                        class="text-center px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Salle</th>
                                    <th
                                        class="text-center px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Prochain cours</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white animate-pulse">
                            </tbody>
                        </table>
                    </div>

                    <!-- Tableau des salles occupées -->
                    <div class="container mx-auto mt-8 max-w-4xl">
                        <h1 class="text-2xl font-bold mb-4">Salles Occupées</h1>
                        <table id="usedRoomsTable" class="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Salle
                                    </th>
                                    <th class="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Sera
                                        Libre</th>
                                </tr>
                            </thead>
                            <tbody class="used-rooms-table bg-white animate-pulse">
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Texte d'explication -->
                <p class="mt-2 text-base text-gray-600 mt-6">
                    <strong>Vous avez besoin d'une salle pour travailler ?</strong> <br>
                    Utilisez cette page pour trouver des salles libres et savoir quand elles seront disponibles.
                    <br>
                    Sélectionnez une date et une heure pour voir les salles disponibles à ce moment-là.
                </p>
                <p class="mt-2 text-base text-gray-600 mt-6">
                    <strong>Il manque une salle ? Une salle ne devrait pas être dans la liste ?</strong> <br>
                    Ou simplement, si vous avez des suggestions ou des remarques, <br>
                    Contactez-moi à l'adresse <strong><a href="mailto:contact@tidic.fr">contact@tidic.fr</a></strong> ou
                    sur Discord : <strong>tidic</strong>

                </p>
            </div>
        </main>
        <footer class="bg-white shadow mt-8">
            <div class="mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8">
                <p class="text-center text-sm text-gray-500">
                    &copy; 2024 tidic.fr/salles. Tous droits réservés.
                </p>
            </div>
        </footer>
    </div>
    <script>
        const univ = '<%= univ %>';
        sortUsedRooms();
        sortFreeRooms();
        updateTable();

        // Fonction pour convertir une date au format 20210101T120000 en objet Date
        function toDate(dt) {
            const year = dt.substring(0, 4);
            const month = dt.substring(4, 6) - 1;
            const day = dt.substring(6, 8);
            const hour = dt.substring(9, 11);
            const minute = dt.substring(11, 13);
            const second = dt.substring(13, 15);
            const eventDate = new Date(Date.UTC(year, month, day, hour, minute, second));
            return eventDate;
        }

        // Fonction pour trier les salles occupées par heure
        function sortUsedRooms() {
            const table = document.getElementById('usedRoomsTable').getElementsByTagName('tbody')[0];
            const rows = Array.from(table.rows);
            rows.sort((a, b) => {
                const timeA = a.cells[1].innerText === 'Aucun cours prévu' ? '24:00' : a.cells[1].innerText;
                const timeB = b.cells[1].innerText === 'Aucun cours prévu' ? '24:00' : b.cells[1].innerText;
                return timeA.localeCompare(timeB);
            });

            rows.forEach(row => table.appendChild(row));
        }

        // Fonction pour trier les salles libres par heure descendante
        function sortFreeRooms() {
            const table = document.getElementById('freeRoomsTable').getElementsByTagName('tbody')[0];
            const rows = Array.from(table.rows);

            rows.sort((a, b) => {
                const timeA = a.cells[1].innerText === 'Aucun cours prévu' ? '24:00' : a.cells[1].innerText;
                const timeB = b.cells[1].innerText === 'Aucun cours prévu' ? '24:00' : b.cells[1].innerText;

                const dateA = new Date(`1970-01-01T${timeA}:00`);
                const dateB = new Date(`1970-01-01T${timeB}:00`);

                return dateB - dateA;
            });
            rows.forEach(row => table.appendChild(row));
        }

        // Fonction pour ajouter un squelette de chargement, qui est affiché pendant le chargement des données a la place des salles
        function addSkeleton() {
            const dropDown = document.getElementById('menu-button');
            dropDown.disabled = true;
            
            ["freeRoomsTable", "usedRoomsTable"].forEach(tableId => {
                const table = document.getElementById(tableId).getElementsByTagName('tbody')[0];
                table.innerHTML = '';
                for (let i = 0; i < 5; i++) {
                    const row = document.createElement('tr');
                    const cell = document.createElement('td');
                    cell.colSpan = 2;
                    cell.innerHTML = '<div class="m-2 mb-0 h-10 bg-gray-200/70 rounded" ></div>';
                    if (i === 4) {
                        cell.innerHTML = '<div class="m-2 h-10 bg-gray-200/70 rounded" ></div>';
                    }
                    row.appendChild(cell);
                    table.appendChild(row);
                }
            });
        }

        function removeSkeleton() {
            const dropDown = document.getElementById('menu-button');
            dropDown.disabled = false;
        }

        // Fonction pour mettre à jour les salles libres et occupées
        async function updateTable(date, time) {
            // Remplace les données par le squellette de chargement
            addSkeleton(); 
            // On récupère les infos des salles
            const query = date && time ? `?date=${date}&time=${time}` : '';
            const response = await axios.get(`/salles/univ/${univ}/rooms${query}`);
            const result = response.data;
            const freeRooms = result.freeRooms;
            const usedRooms = result.usedRooms;
            const invalidRooms = Object.values(result.invalidRooms);

            // On efface le squelette de chargement
            const freeRoomsTable = document.getElementById('freeRoomsTable').getElementsByTagName('tbody')[0];
            freeRoomsTable.innerHTML = '';
            removeSkeleton();
            freeRoomsTable.classList.remove('animate-pulse');
            const usedRoomsTable = document.getElementById('usedRoomsTable').getElementsByTagName('tbody')[0];
            // On affiche les salles libres
            for (const room of Object.keys(freeRooms)) {
                const row = document.createElement('tr');
                const roomCell = document.createElement('td');
                const nextClassCell = document.createElement('td');
                roomCell.className = 'px-4 py-4 whitespace-nowrap text-center';
                nextClassCell.className = 'px-4 py-4 whitespace-nowrap text-center';
                roomCell.innerText = room;
                nextClassCell.innerText = freeRooms[room].nextCourse != null ? (new Date(toDate(freeRooms[room].nextCourse.dtstart))).toLocaleTimeString('fr-FR',
                    { hour: '2-digit', minute: '2-digit', hour12: false })
                    : 'Aucun cours prévu';
                row.appendChild(roomCell);
                row.appendChild(nextClassCell);
                freeRoomsTable.appendChild(row);
            }

            // On efface le squelette de chargement
            usedRoomsTable.innerHTML = '';
            removeSkeleton();
            usedRoomsTable.classList.remove('animate-pulse');
            // On affiche les salles occupées
            for (const room of Object.keys(usedRooms)) {
                const row = document.createElement('tr');
                const roomCell = document.createElement('td');
                const nextClassCell = document.createElement('td');
                roomCell.className = 'px-4 py-4 whitespace-nowrap text-center';
                nextClassCell.className = 'px-4 py-4 whitespace-nowrap text-center';
                roomCell.innerText = room;

                nextClassCell.innerText = usedRooms[room].willBeFree != null ? (new Date(usedRooms[room].willBeFree)).toLocaleTimeString('fr-FR',
                    { hour: '2-digit', minute: '2-digit', hour12: false }) : 'Aucun cours prévu';
                row.appendChild(roomCell);
                row.appendChild(nextClassCell);
                usedRoomsTable.appendChild(row);
            }

            // On affiche les salles invalides
            if (invalidRooms.length > 0) {
                const invalidRoomsContainer = document.createElement('div');
                invalidRoomsContainer.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4';

                const invalidRoomsTitle = document.createElement('strong');
                invalidRoomsTitle.className = 'font-bold';
                invalidRoomsTitle.innerText = 'Erreur:';
                invalidRoomsContainer.appendChild(invalidRoomsTitle);

                const invalidRoomsMessage = document.createElement('span');
                invalidRoomsMessage.className = 'block sm:inline';
                invalidRoomsMessage.innerText = ' Les salles suivantes ont un lien invalide:';
                invalidRoomsContainer.appendChild(invalidRoomsMessage);

                const invalidRoomsList = document.createElement('ul');
                invalidRoomsList.className = 'list-disc list-inside';
                for (const room of invalidRooms) {
                    const listItem = document.createElement('li');
                    listItem.innerText = room;
                    invalidRoomsList.appendChild(listItem);
                }
                invalidRoomsContainer.appendChild(invalidRoomsList);

                document.querySelector('.content').insertBefore(invalidRoomsContainer, document.querySelector('main').children[3]);
            } else {
                const invalidRoomsContainer = document.querySelector('.bg-red-100');
                if (invalidRoomsContainer) {
                    invalidRoomsContainer.remove();
                }
            }

            // Et enfin on les trie
            sortUsedRooms();
            sortFreeRooms();
            if(!date || !time) {
                const now = new Date();
                const options = { weekday: 'long', month: 'long', day: 'numeric' };
                date = now.toLocaleDateString('fr-FR', options);
                time = now.toTimeString().split(' ')[0].slice(0, 5);
            } else {
                const now = new Date(`${date}T${time}:00`);
                const options = { weekday: 'long', month: 'long', day: 'numeric' };
                date = now.toLocaleDateString('fr-FR', options);
                time = now.toTimeString().split(' ')[0].slice(0, 5);
            }
            document.getElementsByClassName('menu-button-text')[0].innerText = `${date} à ${time}`;
        }
    </script>
</body>

</html>